/* MapCSSParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. MapCSSParserTokenManager.java */
package org.openstreetmap.josm.gui.mappaint.mapcss.parsergen;
import java.io.InputStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import org.openstreetmap.josm.Main;
import org.openstreetmap.josm.gui.mappaint.Keyword;
import org.openstreetmap.josm.gui.mappaint.mapcss.Condition;
import org.openstreetmap.josm.gui.mappaint.mapcss.Condition.Context;
import org.openstreetmap.josm.gui.mappaint.mapcss.Expression;
import org.openstreetmap.josm.gui.mappaint.mapcss.ExpressionFactory;
import org.openstreetmap.josm.gui.mappaint.mapcss.ExpressionFactory.NullExpression;
import org.openstreetmap.josm.gui.mappaint.mapcss.Instruction;
import org.openstreetmap.josm.gui.mappaint.mapcss.LiteralExpression;
import org.openstreetmap.josm.gui.mappaint.mapcss.MapCSSException;
import org.openstreetmap.josm.gui.mappaint.mapcss.MapCSSRule;
import org.openstreetmap.josm.gui.mappaint.mapcss.MapCSSRule.Declaration;
import org.openstreetmap.josm.gui.mappaint.mapcss.MapCSSStyleSource;
import org.openstreetmap.josm.gui.mappaint.mapcss.Selector;
import org.openstreetmap.josm.gui.mappaint.mapcss.Selector.ChildOrParentSelector;
import org.openstreetmap.josm.gui.mappaint.mapcss.Selector.GeneralSelector;
import org.openstreetmap.josm.gui.mappaint.mapcss.Selector.LinkSelector;
import org.openstreetmap.josm.gui.mappaint.mapcss.Subpart;
import org.openstreetmap.josm.tools.ColorHelper;
import org.openstreetmap.josm.tools.Pair;
import org.openstreetmap.josm.tools.Utils;

/** Token Manager. */
@SuppressWarnings("unused")public class MapCSSParserTokenManager implements MapCSSParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 38;
         return jjMoveNfa_2(0, 0);
      case 36:
         jjmatchedKind = 48;
         return jjMoveNfa_2(0, 0);
      case 38:
         jjmatchedKind = 46;
         return jjMoveNfa_2(0, 0);
      case 40:
         jjmatchedKind = 20;
         return jjMoveNfa_2(0, 0);
      case 41:
         jjmatchedKind = 21;
         return jjMoveNfa_2(0, 0);
      case 42:
         jjmatchedKind = 29;
         return jjMoveNfa_2(0, 0);
      case 43:
         jjmatchedKind = 44;
         return jjMoveNfa_2(0, 0);
      case 44:
         jjmatchedKind = 22;
         return jjMoveNfa_2(0, 0);
      case 45:
         jjmatchedKind = 45;
         return jjMoveNfa_2(0, 0);
      case 46:
         jjmatchedKind = 50;
         return jjMoveNfa_2(0, 0);
      case 47:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_2(0x40000000000000L);
      case 58:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_2(0x10000000000L);
      case 59:
         jjmatchedKind = 41;
         return jjMoveNfa_2(0, 0);
      case 60:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_2(0x400000000L);
      case 61:
         jjmatchedKind = 37;
         return jjMoveNfa_2(0, 0);
      case 62:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_2(0x200000000L);
      case 63:
         jjmatchedKind = 47;
         return jjMoveNfa_2(0, 0);
      case 83:
         return jjMoveStringLiteralDfa1_2(0x800L);
      case 91:
         jjmatchedKind = 31;
         return jjMoveNfa_2(0, 0);
      case 93:
         jjmatchedKind = 32;
         return jjMoveNfa_2(0, 0);
      case 94:
         jjmatchedKind = 49;
         return jjMoveNfa_2(0, 0);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x800L);
      case 123:
         jjmatchedKind = 18;
         return jjMoveNfa_2(0, 0);
      case 124:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_2(0x80000000000L);
      case 125:
         jjmatchedKind = 19;
         return jjMoveNfa_2(0, 0);
      case 126:
         jjmatchedKind = 39;
         return jjMoveNfa_2(0, 0);
      case 176:
         jjmatchedKind = 51;
         return jjMoveNfa_2(0, 0);
      case 8712:
         jjmatchedKind = 52;
         return jjMoveNfa_2(0, 0);
      case 10697:
         jjmatchedKind = 53;
         return jjMoveNfa_2(0, 0);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(0, 0);
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         break;
      case 58:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa2_2(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x800L);
      case 122:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_2(0, 1);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_2(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(0, 1);
   }
   switch(curChar)
   {
      case 84:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         break;
      case 116:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_2(0, 2);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_2(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 53;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAdd(52); }
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 47)
                     { jjAddStates(0, 2); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAdd(3); }
                  }
                  break;
               case 1:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(3); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(3); }
                  break;
               case 4:
               case 8:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 5:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 6:
                  if (curChar == 34 && kind > 14)
                     kind = 14;
                  break;
               case 10:
                  if (curChar == 47)
                     { jjAddStates(0, 2); }
                  break;
               case 11:
                  if ((0xffff7bff00000000L & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 12:
                  if ((0xffff7fff00000000L & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 15:
                  if (curChar == 47 && kind > 17)
                     kind = 17;
                  break;
               case 17:
                  if (curChar == 36)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 19:
                  if (curChar == 42)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 20:
                  if (curChar == 63)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 23:
                  if (curChar == 41)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 24:
                  if (curChar == 40)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 25:
                  if (curChar == 34)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 26:
                  if (curChar == 39)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 27:
                  if (curChar == 46)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 28:
                  if (curChar == 43)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 32:
                  if (curChar == 47)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddTwoStates(35, 36); }
                  break;
               case 36:
                  if (curChar == 46)
                     { jjCheckNAdd(37); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAdd(37); }
                  break;
               case 38:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(10, 12); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
               case 50:
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAdd(52); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(1); }
                  break;
               case 5:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if (curChar == 92)
                     { jjAddStates(13, 14); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 11:
               case 12:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 13:
               case 33:
                  if (curChar == 92)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x488001404880096L & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 16:
                  if (curChar == 92)
                     { jjCheckNAddStates(15, 30); }
                  break;
               case 18:
                  if (curChar == 94)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 21:
                  if (curChar == 125)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 22:
                  if (curChar == 123)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 29:
                  if (curChar == 93)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 30:
                  if (curChar == 91)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 31:
                  if (curChar == 92)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 34:
                  if (curChar == 92)
                     { jjCheckNAddStates(31, 46); }
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(10, 12); }
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
               case 50:
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x7e0000007eL & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 47:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 5); }
                  break;
               case 11:
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(6, 9); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 53 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xeL) != 0L)
         {
            jjmatchedKind = 12;
            return 3;
         }
         if ((active0 & 0x100L) != 0L)
            return 13;
         return -1;
      case 1:
         if ((active0 & 0x4L) != 0L)
            return 3;
         if ((active0 & 0xaL) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
            return 3;
         }
         return -1;
      case 2:
         if ((active0 & 0xaL) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 20);
      case 41:
         return jjStopAtPos(0, 21);
      case 44:
         return jjStopAtPos(0, 22);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 58:
         return jjStopAtPos(0, 23);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x30L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 123:
         return jjStopAtPos(0, 18);
      case 125:
         return jjStopAtPos(0, 19);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L);
      case 114:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 2, 3);
         break;
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 1, 3);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 116:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 3, 3);
         break;
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(5, 5);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(8, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 37;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAdd(5); }
                  }
                  else if ((0x3400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if (curChar == 47)
                     { jjAddStates(47, 49); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 13:
                  if ((0xffff7bff00000000L & l) != 0L)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 1:
                  if ((0x100000200L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(5); }
                  break;
               case 6:
               case 10:
                  if (curChar == 34)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 7:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 8:
                  if (curChar == 34 && kind > 14)
                     kind = 14;
                  break;
               case 12:
                  if (curChar == 47)
                     { jjAddStates(47, 49); }
                  break;
               case 14:
                  if ((0xffff7fff00000000L & l) != 0L)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 17:
                  if (curChar == 47 && kind > 17)
                     kind = 17;
                  break;
               case 19:
                  if (curChar == 36)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 21:
                  if (curChar == 42)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 22:
                  if (curChar == 63)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 25:
                  if (curChar == 41)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 26:
                  if (curChar == 40)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 27:
                  if (curChar == 34)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 28:
                  if (curChar == 39)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 29:
                  if (curChar == 46)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 30:
                  if (curChar == 43)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 34:
                  if (curChar == 47)
                     { jjCheckNAddStates(53, 56); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(3); }
                  break;
               case 13:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(53, 56); }
                  else if (curChar == 92)
                     { jjCheckNAddStates(57, 72); }
                  if (curChar == 92)
                     { jjCheckNAdd(16); }
                  break;
               case 7:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(73, 74); }
                  break;
               case 11:
                  if (curChar == 92)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 14:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 15:
                  if (curChar == 92)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x488001404880096L & l) != 0L)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 18:
                  if (curChar == 92)
                     { jjCheckNAddStates(75, 90); }
                  break;
               case 20:
                  if (curChar == 94)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 23:
                  if (curChar == 125)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 24:
                  if (curChar == 123)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 31:
                  if (curChar == 93)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 32:
                  if (curChar == 91)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 33:
                  if (curChar == 92)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 35:
                  if (curChar == 92)
                     { jjCheckNAdd(16); }
                  break;
               case 36:
                  if (curChar == 92)
                     { jjCheckNAddStates(57, 72); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(50, 52); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x100000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   11, 33, 34, 5, 6, 7, 12, 13, 15, 16, 40, 47, 51, 8, 9, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 
   31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 13, 
   35, 36, 7, 8, 9, 14, 15, 17, 18, 34, 33, 32, 31, 30, 29, 28, 
   27, 26, 25, 24, 23, 22, 21, 20, 19, 10, 11, 19, 20, 21, 22, 23, 
   24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\141\156\144", "\157\162", "\156\157\164", 
"\100\163\165\160\160\157\162\164\163", "\100\155\145\144\151\141", null, null, "\57\52", null, null, null, null, null, 
null, null, null, null, "\173", "\175", "\50", "\51", "\54", "\72", null, null, null, 
null, null, "\52", "\57", "\133", "\135", "\76\75", "\74\75", "\76", "\74", "\75", 
"\41", "\176", "\72\72", "\73", "\174", "\174\172", "\53", "\55", "\46", "\77", 
"\44", "\136", "\56", "\260", "\u2208", "\u29c9", "\57\52", null, "\52\57", null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 2;
int defaultLexState = 2;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 10)
         {
            jjmatchedKind = 10;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 55)
         {
            jjmatchedKind = 55;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 57)
         {
            jjmatchedKind = 57;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MapCSSParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MapCSSParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
	
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 53; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "PREPROCESSOR",
   "PP_COMMENT",
   "DEFAULT",
   "COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 3, -1, 2, -1, 
};
static final long[] jjtoToken = {
   0x1fffffffbfe7bffL, 
};
static final long[] jjtoSkip = {
   0x200000000000000L, 
};
static final long[] jjtoMore = {
   0x400L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[53];
    private final int[] jjstateSet = new int[2 * 53];

    
    protected int curChar;
}
